name: Build Kernel using Los Source

on:
  workflow_dispatch:

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    env:
      KERNEL_WORKSPACE: "/mnt/kernel_workspace"

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Ccache
        uses: hendrikmuhs/ccache-action@v1.2.18
        with:
          key: ccache-${{ runner.os }}-build
          max-size: 4G

      - name: Set Swap
        run: |
          export SWAP_FILE=$(swapon --show=NAME | tail -n 1)
          sudo swapoff $SWAP_FILE
          sudo rm -rf $SWAP_FILE
          sudo fallocate -l 16G /swap_filex
          sudo chmod 600 /swap_filex
          sudo mkswap /swap_filex
          sudo swapon /swap_filex
          df -h
          free -h

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y python3 git libelf-dev dwarves ccache
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /bin/repo

      - name: Set Environment Variable
        run: |
          echo "BUILD_TIME=$(date "+%y%m%d%H")" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=7a72" >> $GITHUB_ENV
          echo "KBUILD_BUILD_HOST=action" >> $GITHUB_ENV
          
          sudo mkdir -p /mnt/kernel_workspace
          sudo chmod 0777 /mnt/kernel_workspace
          
          echo "TOOLCHAIN_DIR=$HOME/toolchain" >> $GITHUB_ENV
          
          git config --global user.email "${{ env.KBUILD_BUILD_USER }}@${{ env.KBUILD_BUILD_HOST }}"
          git config --global user.name "${{ env.KBUILD_BUILD_HOST }}"

      - name: Restore Pre-built Toolchain
        uses: actions/cache@v3
        with:
          path: ${{ env.TOOLCHAIN_DIR }}
          key: toolchain-${{ runner.os }}-r536225

      - name: Download the Pre-built Toolchain
        run: |
          INSTALLED="${{ env.TOOLCHAIN_DIR }}/.installed"
          if [ ! -f "$INSTALLED" ]; then
            mkdir -p ${{ env.TOOLCHAIN_DIR }}
            cd ${{ env.TOOLCHAIN_DIR }}
            wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r536225.tar.gz
            tar axf clang-r536225.tar.gz
            rm clang-r536225.tar.gz
            touch "$INSTALLED"
          fi

      - name: Sync the Kernel Source Code
        run: |
          echo "Changing to directory: /mnt/kernel_workspace..."
          cd "/mnt/kernel_workspace"
          
          echo "Sync kernel source"
          git clone --depth=1 https://github.com/LineageOS/android_kernel_oneplus_sm8650-modules.git -b lineage-22.2 sm8650-modules
          git clone --depth=1 https://github.com/LineageOS/android_kernel_oneplus_sm8650.git -b lineage-22.2 common
          
          echo "Get kernel version"
          echo KVER=$(awk '/^(VERSION|PATCHLEVEL|SUBLEVEL) =/ {v[++i]=$3} END {print v[1]"."v[2]"."v[3]}' ./common/Makefile) >> $GITHUB_ENV
          echo "${{ env.KVER }}"
          cd common
          
          echo "Pre-modify"
          rm -rf ./android/abi_gki_protected_exports_* || echo "No protected exports!"
          sed -i 's/check_defconfig//' build.config.gki || true
          # sed -i '$s|echo "\$res"|echo "-zsck"|' scripts/setlocalversion || true
          # sed -i 's/^#define LINUX_COMPILER.*$/#define LINUX_COMPILER\t\t"clang-r536225"/' scripts/mkcompile_h || true

      - name: Add KernelSU
        run: |
          echo "Changing to directory: /mnt/kernel_workspace..."
          cd "/mnt/kernel_workspace"
          
          echo "Adding KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/7a72/KernelSU/refs/heads/kernel/kernel/setup.sh" | bash -s manual y
          cd ./KernelSU
          KSU_VERSION=$(grep -e "^KSU_VERSION" kernel/Makefile | awk '{print $3}')
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

      - name: Apply patches
        run: |
          echo "Changing to directory: /mnt/kernel_workspace..."
          cd "/mnt/kernel_workspace"
          
          # git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-android14-6.1
          # cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch ./common/
          # cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
          # cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          cd ./common
          # patch -p1 < 50_add_susfs_in_gki-android14-6.1.patch
          cp $GITHUB_WORKSPACE/patches/rekernel_6_1.patch .
          patch -p1 < rekernel_6_1.patch
          cp $GITHUB_WORKSPACE/patches/hide_lineage.patch .
          patch -p1 < hide_lineage.patch
          # cp $GITHUB_WORKSPACE/patches/module_load.patch .
          # patch -p1 < module_load.patch

      - name: Add Configuration Settings
        run: |
          echo "Changing to directory: /mnt/kernel_workspace/common..."
          cd "/mnt/kernel_workspace/common"

          echo "Adding configuration settings to defconfig..."
          sed -i '1i # CONFIG_LOCALVERSION_AUTO is not set' ${KCONFIG}
          sed -i '1i CONFIG_LOCALVERSION="-zsck"' ${KCONFIG}
          sed -i '/^CONFIG_TMPFS=y$/a CONFIG_TMPFS_POSIX_ACL=y' ${KCONFIG}
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ${KCONFIG}
          # echo "CONFIG_LTO_CLANG_THIN=y" >> ${KCONFIG}
          # echo "CONFIG_MODULE_FORCE_LOAD=y" >> ${KCONFIG}
          # echo "CONFIG_PID_NS=y" >> ${KCONFIG}
          # echo "CONFIG_POSIX_MQUEUE=y" >> ${KCONFIG}
          # echo "CONFIG_IPC_NS=y" >> ${KCONFIG}
          # echo "CONFIG_USER_NS=y" >> ${KCONFIG}

      - name: Build the Kernel
        run: |
          echo "Changing to configuration directory: /mnt/kernel_workspace/common..."
          cd "/mnt/kernel_workspace/common"
          
          # echo "Clean dirty"
          # git add -A
          # git commit -s -a -m "build"
          
          export PATH=${{ env.TOOLCHAIN_DIR }}/bin:$PATH
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          
          echo "Building the kernel..."
          
          kargs="ARCH=arm64 LLVM=1 LLVM_IAS=1 -j$(nproc --all) O=out KBUILD_BUILD_HOST=${{ env.KBUILD_BUILD_HOST }} KBUILD_BUILD_USER=${{ env.KBUILD_BUILD_USER }}"
          make CC="ccache clang" $kargs gki_defconfig vendor/pineapple_GKI.config vendor/oplus/pineapple_GKI.config # Build the kernel config
          make CC="ccache clang" $kargs # Build the kernel itself
          
          # make $kargs modules_install INSTALL_MOD_PATH=/mnt/kernel_workspace/Kernel_Prebuilts # Save the kernel modules
          # make $kargs install INSTALL_PATH=/mnt/kernel_workspace/Kernel_Prebuilts # Save the kernel image(s) and devicetrees
          # make $kargs headers_install INSTALL_HDR_PATH=/mnt/kernel_workspace/Kernel_Prebuilts/usr # Save the kernel headers

      # - name: Upload Kernel_Prebuilts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: Kernel_Prebuilts
      #     path: /mnt/kernel_workspace/Kernel_Prebuilts/*

      - name: Create AnyKernel3
        run: |
          echo "Changing to configuration directory: /mnt/kernel_workspace/..."
          cd "/mnt/kernel_workspace/"
          
          git clone https://github.com/Kernel-SU/AnyKernel3 --depth=1
          
          echo "Copying Image"
          cp /mnt/kernel_workspace/common/out/arch/arm64/boot/Image ./AnyKernel3/Image

      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AK3-OP12-los-${{ env.KVER }}-${{ env.KSUVER }}_${{ env.BUILD_TIME }}
          path: /mnt/kernel_workspace/AnyKernel3/*
